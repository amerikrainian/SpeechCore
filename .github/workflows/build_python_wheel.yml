name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Keep this for debugging
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_mode: [shared, static]
        build_type: [release, debug]
        arch: [x86_64, arm64]
        exclude:
          - os: ubuntu-latest
            arch: arm64
          - os: windows-latest
            arch: arm64
        include:
          - os: windows-latest
            arch: x86
            build_mode: shared
            build_type: release
          - os: windows-latest
            arch: x86
            build_mode: shared
            build_type: debug
          - os: windows-latest
            arch: x86
            build_mode: static
            build_type: release
          - os: windows-latest
            arch: x86
            build_mode: static
            build_type: debug
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up Java (x64)
        if: matrix.os == 'windows-latest' && matrix.arch != 'x86'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          architecture: 'x64'

      - name: Set up Java (x86)
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          architecture: 'x86'

      - name: Set up Java (Non-Windows)
        if: matrix.os != 'windows-latest'
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Setup Visual Studio environment (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pip install scons

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install scons || echo "SCons already installed"

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc g++ python3 python3-pip speech-dispatcher libspeechd-dev
          sudo pip3 install scons

      - name: Check JAVA_HOME
        run: echo "JAVA_HOME is set to $JAVA_HOME"
        shell: bash

      - name: List Java Installation Directory
        if: env.JAVA_HOME != ''
        run: |
          ls -l "$JAVA_HOME" || echo "JAVA_HOME not set"
          ls -l "$JAVA_HOME/lib" || echo "Java lib directory not found"
        shell: bash

      # --- MODIFIED: Build project (Windows) ---
      - name: Build project (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          set VCVARS_ARG=x64
          REM --- CONCISE CHANGE FOR X86 MSVC DEBUG ---
          if "${{ matrix.arch }}" == "x86" (
            set VCVARS_ARG=x86
            echo "Enabling SCons MSCOMMON_DEBUG for x86"
            set SCONS_MSCOMMON_DEBUG=-
          )
          REM --- END OF CONCISE CHANGE ---

          echo "Calling vcvarsall.bat %VCVARS_ARG%"
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %VCVARS_ARG%
          
          echo "Running SCons for arch: ${{ matrix.arch }}"
          REM Using basic, safe SCons debug flags. SCONS_MSCOMMON_DEBUG (if set) will provide MSVC specific details.
          scons --debug=presub,explain build_mode=${{ matrix.build_mode }} build_type=${{ matrix.build_type }} arch=${{ matrix.arch }}

      - name: Build project (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          scons -Q build_mode=${{ matrix.build_mode }} build_type=${{ matrix.build_type }} arch=${{ matrix.arch }}

      - name: Verify build artifacts
        continue-on-error: true 
        run: |
          if [ ! -d "lib" ]; then echo "Lib directory not found!"; exit 1; fi
        shell: bash

      - name: Upload build artifacts
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.build_mode }}-${{ matrix.build_type }}
          path: lib/

  consolidate:
    needs: build
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          if-no-files-found: warn

      - name: Create consolidated archive
        run: |
          cd artifacts
          if [ -n "$(find . -maxdepth 1 -type d -print -quit)" ]; then
            tar -czf ../SpeechCore-builds.tar.gz */
          else
            echo "No artifacts found to consolidate."
            touch ../SpeechCore-builds.tar.gz
          fi

      - name: Upload consolidated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SpeechCore-All-Builds
          path: SpeechCore-builds.tar.gz